name: "GstVkVideoParser native build"
run-name: Native build by ${{ github.actor }}
on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  REPO_NAME: gstvkvideoparser

jobs:
  ci-linux:
    strategy:
      matrix:
        platform: [linux-x86_64, linux-x86_64-full, linux-x86-full]
    runs-on: ubuntu-22.04

    env:
      TERM: dumb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "DESTDIR=$REPO_NAME-release" >> $GITHUB_ENV
          echo "GST_PLUGIN_PATH=$GITHUB_WORKSPACE/builddir/lib/plugins" >> $GITHUB_ENV

      - name: Set i386 environment variables
        if: matrix.platform == 'linux-x86-full'
        run: |
            echo "CC=cc -m32" >> $GITHUB_ENV
            echo "CXX=c++ -m32" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig/" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install --assume-yes --no-install-recommends valgrind python3-pip ninja-build
          sudo pip3 install meson==1.0.1

      - name: Install i386 dependencies
        if: matrix.platform == 'linux-x86-full'
        run: |
          sudo apt install gcc-multilib g++-multilib
          # hack to avoid that zlib x64 gets picked up
          sudo apt remove --assume-yes zlib1g-dev

      - name: Install GStreamer dev packages
        if: matrix.platform == 'linux-x86_64'
        run: |
          # Hack to install libunwind-dev (gstreamer dependency)
          sudo apt remove --assume-yes libunwind-14-dev
          sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-bad

      - name: Configure
        run: |
          # Configure using python script only in full configuration
          if $(echo "${{ matrix.platform }}" | grep -q "full"); then
            python3 ./configure_gst_full.py builddir
          else
            meson setup builddir
          fi

      - name: Build
        run: meson compile --verbose -C builddir
      # The test can not be perfomed because of nvidia test case. It needs addtional work on valgrind support for 32 bits application
      - name: Test
        if: matrix.platform == 'linux-x86_64'
        run: |
          meson test --num-processes=1 --wrap=${GITHUB_WORKSPACE}/valgrind/valgrind.sh --verbose --timeout-multiplier=2 -C builddir

      - name: Test Reference
        if: matrix.platform == 'linux-x86_64'
        run: |
          ./builddir/test/testesapp samples/Sample_10.avc > builddir/Sample_10.avc.ref;
          diff -u builddir/Sample_10.avc.ref samples/Sample_10.avc.ref;
          ./builddir/test/testesapp -c h265 samples/Sample_10.hevc  > builddir/Sample_10.hevc.ref;
          diff -u builddir/Sample_10.hevc.ref samples/Sample_10.hevc.ref

      - name: Install
        run: ninja -C builddir install

      - name: Create zip
        shell: bash
        run: |
          pushd builddir/
          zip -r ../$REPO_NAME-release-${{ matrix.platform }}.zip $REPO_NAME-release
          popd

      - name: Upload linux release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-release-${{ matrix.platform }}
          path: ${{ env.REPO_NAME }}-release-${{ matrix.platform }}.zip

  ci-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [windows-x64, windows-x64-full, windows-x86-full]
    steps:
      - name: Set up X86 MSVC environment
        if: matrix.platform == 'windows-x86-full'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: 'x86'

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: echo "DESTDIR=$Env:REPO_NAME-release" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install common dependencies
        run: |
          choco install --yes zip
      
      - name: Install pkgconfiglite
        if: matrix.platform == 'windows-x64'
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 120
          max_attempts: 3
          retry_on: error
          command: choco install --yes --allow-empty-checksums pkgconfiglite
      
      - name: Install gstreamer dependencies
        if: matrix.platform == 'windows-x64'
        run: |
          choco install --yes gstreamer gstreamer-devel

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install meson
        run: |
          python -m pip install meson==1.0.1
          python -m pip install ninja

      - name: Configure
        shell: powershell
        run: |
          # Configure using python script only in full configuration
          if ("${{ matrix.platform }}" -match "-full") {
              python3 ./configure_gst_full.py builddir
          } else {
              meson setup --vsenv builddir
          }
        env:
          PKG_CONFIG_PATH: C:\gstreamer\1.0\msvc_x86_64\lib\pkgconfig

      - name: Build
        run: meson compile --verbose -C builddir

      # FIXME: test aren't executed
      #- name: Test
      #  run: meson test --verbose -C builddir

      - name: Install meson build
        shell: bash
        run: |
          ninja -C builddir install

      - name: Install GStreamer dependencies (only windows-x64)
        if: matrix.platform == 'windows-x64'
        shell: bash
        run: |
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\ffi-7.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\orc-0.4-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\intl-8.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\glib-2.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gobject-2.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gmodule-2.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstreamer-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstcheck-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstcodecparsers-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstbase-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstvideo-1.0-0.dll builddir/$DESTDIR/bin

      - name: Create zip
        shell: bash
        run: |
          pushd builddir/
          zip -r ../$REPO_NAME-release-${{ matrix.platform }}.zip $REPO_NAME-release
          popd

      - name: Upload windows release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-release-${{ matrix.platform }}
          path: ${{ env.REPO_NAME }}-release-${{ matrix.platform }}.zip

