name: "GstVkVideoParser native build"
run-name: Native build by ${{ github.actor }}
on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  REPO_NAME: gstvkvideoparser

jobs:
  ci-linux-x86_64:
    runs-on: ubuntu-22.04

    env:
      PLATFORM: linux-x86_64
      TERM: dumb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "DESTDIR=$REPO_NAME-release" >> $GITHUB_ENV
          echo "GST_PLUGIN_PATH=$GITHUB_WORKSPACE/builddir/plugins" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt update
          # Hack to install libunwind-dev (gstreamer dependency)
          sudo apt remove --assume-yes libunwind-14-dev
          sudo apt install --assume-yes --no-install-recommends meson libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-bad valgrind

      - name: Configure
        run: meson setup builddir

      - name: Build
        run: meson compile --verbose -C builddir

      - name: Test
        run: |
          meson test --num-processes=1 --wrap=${GITHUB_WORKSPACE}/valgrind/valgrind.sh --verbose --timeout-multiplier=2 -C builddir

      - name: Test Reference
        run: |
          ./builddir/test/testapp samples/Sample_10.avc > builddir/Sample_10.avc.ref;
          diff -u builddir/Sample_10.avc.ref samples/Sample_10.avc.ref;
          ./builddir/test/testapp samples/Sample_10.hevc  > builddir/Sample_10.hevc.ref;
          diff -u builddir/Sample_10.hevc.ref samples/Sample_10.hevc.ref

      - name: Install
        run: ninja -C builddir install

      - name: Create zip
        shell: bash
        run: |
          pushd builddir/
          zip -r ../$REPO_NAME-release-$PLATFORM.zip $REPO_NAME-release
          popd

      - name: Upload linux release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-release-${{ env.PLATFORM }}
          path: ${{ env.REPO_NAME }}-release-${{ env.PLATFORM }}.zip

  ci-win64:
    runs-on: windows-latest

    env:
      PLATFORM: windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: echo "DESTDIR=$Env:REPO_NAME-release" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install pkgconfiglite
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 120
          max_attempts: 3
          retry_on: error
          command: choco install --yes --allow-empty-checksums pkgconfiglite

      - name: Install dependencies
        run: |
          choco install --yes gstreamer gstreamer-devel
          choco install --yes zip

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install meson
        run: python -m pip install meson ninja

      - name: Configure
        run: meson setup --vsenv builddir
        env:
          PKG_CONFIG_PATH: C:\gstreamer\1.0\msvc_x86_64\lib\pkgconfig

      - name: Build
        run: meson compile --verbose -C builddir

      # FIXME: test aren't executed
      #- name: Test
      #  run: meson test --verbose -C builddir

      - name: Install
        shell: bash
        run: |
          ninja -C builddir install
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\ffi-7.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\orc-0.4-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\intl-8.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\glib-2.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gobject-2.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gmodule-2.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstreamer-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstcheck-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstcodecparsers-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstbase-1.0-0.dll builddir/$DESTDIR/bin
          cp C:\\gstreamer\\1.0\\msvc_x86_64\\bin\\gstvideo-1.0-0.dll builddir/$DESTDIR/bin

      - name: Create zip
        shell: bash
        run: |
          pushd builddir/
          zip -r ../$REPO_NAME-release-$PLATFORM.zip $REPO_NAME-release
          popd

      - name: Upload windows release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-release-${{ env.PLATFORM }}
          path: ${{ env.REPO_NAME }}-release-${{ env.PLATFORM }}.zip
